"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class LettersApi extends runtime.BaseAPI {
    /**
     */
    lettersCreateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling lettersCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LetterToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LetterFromJSON(jsonValue));
        });
    }
    /**
     */
    lettersCreate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersCreateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersDeleteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    lettersDelete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.lettersDeleteRaw(requestParameters);
        });
    }
    /**
     * Generates pre-signed form data for uploading files to object storage.
     */
    lettersFileSignCreateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling lettersFileSignCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/file/sign`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.SignRequestToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.SignRequestFromJSON(jsonValue));
        });
    }
    /**
     * Generates pre-signed form data for uploading files to object storage.
     */
    lettersFileSignCreate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersFileSignCreateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersFilesCreateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.letterPk === null || requestParameters.letterPk === undefined) {
                throw new runtime.RequiredError('letterPk', 'Required parameter requestParameters.letterPk was null or undefined when calling lettersFilesCreate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling lettersFilesCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{letter_pk}/files/`.replace(`{${"letter_pk"}}`, encodeURIComponent(String(requestParameters.letterPk))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ModelFileToJSON(requestParameters.data),
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     */
    lettersFilesCreate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersFilesCreateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersFilesDeleteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersFilesDelete.');
            }
            if (requestParameters.letterPk === null || requestParameters.letterPk === undefined) {
                throw new runtime.RequiredError('letterPk', 'Required parameter requestParameters.letterPk was null or undefined when calling lettersFilesDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{letter_pk}/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"letter_pk"}}`, encodeURIComponent(String(requestParameters.letterPk))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    lettersFilesDelete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.lettersFilesDeleteRaw(requestParameters);
        });
    }
    /**
     */
    lettersFilesListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.letterPk === null || requestParameters.letterPk === undefined) {
                throw new runtime.RequiredError('letterPk', 'Required parameter requestParameters.letterPk was null or undefined when calling lettersFilesList.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{letter_pk}/files/`.replace(`{${"letter_pk"}}`, encodeURIComponent(String(requestParameters.letterPk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse20011FromJSON(jsonValue));
        });
    }
    /**
     */
    lettersFilesList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersFilesListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersFilesPartialUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersFilesPartialUpdate.');
            }
            if (requestParameters.letterPk === null || requestParameters.letterPk === undefined) {
                throw new runtime.RequiredError('letterPk', 'Required parameter requestParameters.letterPk was null or undefined when calling lettersFilesPartialUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling lettersFilesPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{letter_pk}/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"letter_pk"}}`, encodeURIComponent(String(requestParameters.letterPk))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ModelFileToJSON(requestParameters.data),
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     */
    lettersFilesPartialUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersFilesPartialUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersFilesReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersFilesRead.');
            }
            if (requestParameters.letterPk === null || requestParameters.letterPk === undefined) {
                throw new runtime.RequiredError('letterPk', 'Required parameter requestParameters.letterPk was null or undefined when calling lettersFilesRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{letter_pk}/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"letter_pk"}}`, encodeURIComponent(String(requestParameters.letterPk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     */
    lettersFilesRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersFilesReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersFilesUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersFilesUpdate.');
            }
            if (requestParameters.letterPk === null || requestParameters.letterPk === undefined) {
                throw new runtime.RequiredError('letterPk', 'Required parameter requestParameters.letterPk was null or undefined when calling lettersFilesUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling lettersFilesUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{letter_pk}/files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"letter_pk"}}`, encodeURIComponent(String(requestParameters.letterPk))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ModelFileToJSON(requestParameters.data),
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     */
    lettersFilesUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersFilesUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2006FromJSON(jsonValue));
        });
    }
    /**
     */
    lettersList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersPartialUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersPartialUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling lettersPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LetterToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LetterFromJSON(jsonValue));
        });
    }
    /**
     */
    lettersPartialUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersPartialUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LetterFromJSON(jsonValue));
        });
    }
    /**
     */
    lettersRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    lettersUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling lettersUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling lettersUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/letters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.LetterToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LetterFromJSON(jsonValue));
        });
    }
    /**
     */
    lettersUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.lettersUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.LettersApi = LettersApi;
