"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class CollectionsApi extends runtime.BaseAPI {
    /**
     */
    collectionsCasesEventsListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling collectionsCasesEventsList.');
            }
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesEventsList.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/{case_pk}/events/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2005FromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesEventsList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesEventsListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCasesEventsReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling collectionsCasesEventsRead.');
            }
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesEventsRead.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsCasesEventsRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/{case_pk}/events/{id}/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.EventFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesEventsRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesEventsReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCasesLettersListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling collectionsCasesLettersList.');
            }
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesLettersList.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/{case_pk}/letters/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2006FromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesLettersList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesLettersListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCasesLettersReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling collectionsCasesLettersRead.');
            }
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesLettersRead.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsCasesLettersRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/{case_pk}/letters/{id}/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.LetterFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesLettersRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesLettersReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCasesListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesList.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/`.replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2004FromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCasesNotesListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling collectionsCasesNotesList.');
            }
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesNotesList.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/{case_pk}/notes/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2007FromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesNotesList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesNotesListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCasesNotesReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling collectionsCasesNotesRead.');
            }
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesNotesRead.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsCasesNotesRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/{case_pk}/notes/{id}/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.NoteFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesNotesRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesNotesReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCasesReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsCasesRead.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsCasesRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/cases/{id}/`.replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CaseFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCasesRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCasesReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsCreateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling collectionsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CollectionToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CollectionFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsCreate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsCreateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsDeleteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    collectionsDelete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.collectionsDeleteRaw(requestParameters);
        });
    }
    /**
     */
    collectionsListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2003FromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsPartialUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsPartialUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling collectionsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CollectionToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CollectionFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsPartialUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsPartialUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CollectionFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    collectionsTokensCreateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.collectionPk === null || requestParameters.collectionPk === undefined) {
                throw new runtime.RequiredError('collectionPk', 'Required parameter requestParameters.collectionPk was null or undefined when calling collectionsTokensCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{collection_pk}/tokens/`.replace(`{${"collection_pk"}}`, encodeURIComponent(String(requestParameters.collectionPk))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    collectionsTokensCreate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.collectionsTokensCreateRaw(requestParameters);
        });
    }
    /**
     */
    collectionsUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling collectionsUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling collectionsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/collections/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CollectionToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CollectionFromJSON(jsonValue));
        });
    }
    /**
     */
    collectionsUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.collectionsUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.CollectionsApi = CollectionsApi;
