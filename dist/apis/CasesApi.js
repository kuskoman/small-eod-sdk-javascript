"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class CasesApi extends runtime.BaseAPI {
    /**
     */
    casesCreateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling casesCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CaseCountToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CaseCountFromJSON(jsonValue));
        });
    }
    /**
     */
    casesCreate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesCreateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesDeleteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling casesDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    casesDelete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.casesDeleteRaw(requestParameters);
        });
    }
    /**
     */
    casesListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse200FromJSON(jsonValue));
        });
    }
    /**
     */
    casesList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesNotifiedUserListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling casesNotifiedUserList.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{case_pk}/notifiedUser/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2001FromJSON(jsonValue));
        });
    }
    /**
     */
    casesNotifiedUserList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesNotifiedUserListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesNotifiedUserReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling casesNotifiedUserRead.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling casesNotifiedUserRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{case_pk}/notifiedUser/{id}/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.UserFromJSON(jsonValue));
        });
    }
    /**
     */
    casesNotifiedUserRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesNotifiedUserReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesPartialUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling casesPartialUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling casesPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CaseCountToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CaseCountFromJSON(jsonValue));
        });
    }
    /**
     */
    casesPartialUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesPartialUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling casesRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CaseCountFromJSON(jsonValue));
        });
    }
    /**
     */
    casesRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesResponsibleUserListRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling casesResponsibleUserList.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{case_pk}/responsibleUser/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.InlineResponse2001FromJSON(jsonValue));
        });
    }
    /**
     */
    casesResponsibleUserList(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesResponsibleUserListRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesResponsibleUserReadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.casePk === null || requestParameters.casePk === undefined) {
                throw new runtime.RequiredError('casePk', 'Required parameter requestParameters.casePk was null or undefined when calling casesResponsibleUserRead.');
            }
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling casesResponsibleUserRead.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{case_pk}/responsibleUser/{id}/`.replace(`{${"case_pk"}}`, encodeURIComponent(String(requestParameters.casePk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.UserFromJSON(jsonValue));
        });
    }
    /**
     */
    casesResponsibleUserRead(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesResponsibleUserReadRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    casesUpdateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling casesUpdate.');
            }
            if (requestParameters.data === null || requestParameters.data === undefined) {
                throw new runtime.RequiredError('data', 'Required parameter requestParameters.data was null or undefined when calling casesUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            const response = yield this.request({
                path: `/cases/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CaseCountToJSON(requestParameters.data),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CaseCountFromJSON(jsonValue));
        });
    }
    /**
     */
    casesUpdate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.casesUpdateRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.CasesApi = CasesApi;
