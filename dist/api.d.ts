/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AddressDataNested
 */
export interface AddressDataNested {
    /**
     * E-mail address.
     * @type {string}
     * @memberof AddressDataNested
     */
    email?: string;
    /**
     * Name of city.
     * @type {string}
     * @memberof AddressDataNested
     */
    city?: string;
    /**
     * ePUAP address.
     * @type {string}
     * @memberof AddressDataNested
     */
    epuap?: string;
    /**
     * Name of street.
     * @type {string}
     * @memberof AddressDataNested
     */
    street?: string;
    /**
     * House number.
     * @type {string}
     * @memberof AddressDataNested
     */
    houseNo?: string;
    /**
     * Postal code.
     * @type {string}
     * @memberof AddressDataNested
     */
    postalCode?: string;
    /**
     * Flat number.
     * @type {string}
     * @memberof AddressDataNested
     */
    flatNo?: string;
}
/**
 *
 * @export
 * @interface Case
 */
export interface Case {
    /**
     *
     * @type {number}
     * @memberof Case
     */
    id?: number;
    /**
     * Comment for this case.
     * @type {string}
     * @memberof Case
     */
    comment?: string;
    /**
     * Case audits this Institution.
     * @type {Array<number>}
     * @memberof Case
     */
    auditedInstitution?: Array<number>;
    /**
     * Case\'s name.
     * @type {string}
     * @memberof Case
     */
    name: string;
    /**
     *
     * @type {Array<number>}
     * @memberof Case
     */
    responsibleUser?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof Case
     */
    notifiedUser?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof Case
     */
    feature?: Array<number>;
    /**
     *
     * @type {Array<string>}
     * @memberof Case
     */
    tag?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof Case
     */
    createdBy?: number;
    /**
     *
     * @type {number}
     * @memberof Case
     */
    modifiedBy?: number;
    /**
     *
     * @type {string}
     * @memberof Case
     */
    createdOn?: string;
    /**
     *
     * @type {string}
     * @memberof Case
     */
    modifiedOn?: string;
}
/**
 *
 * @export
 * @interface CaseCount
 */
export interface CaseCount {
    /**
     *
     * @type {number}
     * @memberof CaseCount
     */
    id?: number;
    /**
     * Comment for this case.
     * @type {string}
     * @memberof CaseCount
     */
    comment?: string;
    /**
     * Case audits this Institution.
     * @type {Array<number>}
     * @memberof CaseCount
     */
    auditedInstitution?: Array<number>;
    /**
     * Case\'s name.
     * @type {string}
     * @memberof CaseCount
     */
    name: string;
    /**
     *
     * @type {Array<number>}
     * @memberof CaseCount
     */
    responsibleUser?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof CaseCount
     */
    notifiedUser?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof CaseCount
     */
    feature?: Array<number>;
    /**
     *
     * @type {Array<string>}
     * @memberof CaseCount
     */
    tag?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof CaseCount
     */
    createdBy?: number;
    /**
     *
     * @type {number}
     * @memberof CaseCount
     */
    modifiedBy?: number;
    /**
     *
     * @type {string}
     * @memberof CaseCount
     */
    createdOn?: string;
    /**
     *
     * @type {string}
     * @memberof CaseCount
     */
    modifiedOn?: string;
    /**
     *
     * @type {number}
     * @memberof CaseCount
     */
    letterCount?: number;
    /**
     *
     * @type {number}
     * @memberof CaseCount
     */
    noteCount?: number;
    /**
     *
     * @type {number}
     * @memberof CaseCount
     */
    eventCount?: number;
}
/**
 *
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     *
     * @type {number}
     * @memberof Channel
     */
    id?: number;
    /**
     * Channel\'s name.
     * @type {string}
     * @memberof Channel
     */
    name: string;
    /**
     * Name of city in institution address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    city?: boolean;
    /**
     * Voivodeship in institution address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    voivodeship?: boolean;
    /**
     * Flat number in institution address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    flatNo?: boolean;
    /**
     * Name of street in institution address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    street?: boolean;
    /**
     * Postal code in institution address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    postalCode?: boolean;
    /**
     * House number in institution address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    houseNo?: boolean;
    /**
     * Institution e-mail address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    email?: boolean;
    /**
     * Institution ePUAP address is mandatory for this channel.
     * @type {boolean}
     * @memberof Channel
     */
    epuap?: boolean;
}
/**
 *
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     *
     * @type {number}
     * @memberof Collection
     */
    id?: number;
    /**
     * Collection\'s name.
     * @type {string}
     * @memberof Collection
     */
    name: string;
    /**
     * Comment for collection.
     * @type {string}
     * @memberof Collection
     */
    comment?: string;
    /**
     * Make public.
     * @type {boolean}
     * @memberof Collection
     */
    _public?: boolean;
    /**
     * An expiration date of collection.
     * @type {string}
     * @memberof Collection
     */
    expiredOn: string;
    /**
     * Query for collection.
     * @type {string}
     * @memberof Collection
     */
    query: string;
}
/**
 *
 * @export
 * @interface Description
 */
export interface Description {
    /**
     * Description of letter.
     * @type {string}
     * @memberof Description
     */
    name: string;
}
/**
 *
 * @export
 * @interface Dictionary
 */
export interface Dictionary {
    /**
     * Name of dictionary.
     * @type {string}
     * @memberof Dictionary
     */
    name: string;
    /**
     * Make active.
     * @type {boolean}
     * @memberof Dictionary
     */
    active?: boolean;
    /**
     * Minimum number of items.
     * @type {number}
     * @memberof Dictionary
     */
    minItems?: number;
    /**
     * Maximum number of items.
     * @type {number}
     * @memberof Dictionary
     */
    maxItems?: number;
    /**
     *
     * @type {Array<NestedFeature>}
     * @memberof Dictionary
     */
    values: Array<NestedFeature>;
}
/**
 *
 * @export
 * @interface Event
 */
export interface Event {
    /**
     *
     * @type {number}
     * @memberof Event
     */
    id?: number;
    /**
     * Case for this event.
     * @type {number}
     * @memberof Event
     */
    _case: number;
    /**
     * Name of event.
     * @type {string}
     * @memberof Event
     */
    name: string;
    /**
     * Date of event.
     * @type {string}
     * @memberof Event
     */
    data: string;
    /**
     * Comment text.
     * @type {string}
     * @memberof Event
     */
    comment: string;
}
/**
 *
 * @export
 * @interface ExternalIdentifierNested
 */
export interface ExternalIdentifierNested {
    /**
     * Tax Identification Number.
     * @type {string}
     * @memberof ExternalIdentifierNested
     */
    nip?: string;
    /**
     * Statistical Identification Number.
     * @type {string}
     * @memberof ExternalIdentifierNested
     */
    regon?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    previous?: string | null;
    /**
     *
     * @type {Array<CaseCount>}
     * @memberof InlineResponse200
     */
    results: Array<CaseCount>;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2001
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    previous?: string | null;
    /**
     *
     * @type {Array<User>}
     * @memberof InlineResponse2001
     */
    results: Array<User>;
}
/**
 *
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse20010
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20010
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20010
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Institution>}
     * @memberof InlineResponse20010
     */
    results: Array<Institution>;
}
/**
 *
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse20011
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20011
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20011
     */
    previous?: string | null;
    /**
     *
     * @type {Array<any>}
     * @memberof InlineResponse20011
     */
    results: Array<any>;
}
/**
 *
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse20012
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20012
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20012
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Tag>}
     * @memberof InlineResponse20012
     */
    results: Array<Tag>;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Channel>}
     * @memberof InlineResponse2002
     */
    results: Array<Channel>;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Collection>}
     * @memberof InlineResponse2003
     */
    results: Array<Collection>;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2004
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Case>}
     * @memberof InlineResponse2004
     */
    results: Array<Case>;
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2005
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Event>}
     * @memberof InlineResponse2005
     */
    results: Array<Event>;
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2006
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Letter>}
     * @memberof InlineResponse2006
     */
    results: Array<Letter>;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2007
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Note>}
     * @memberof InlineResponse2007
     */
    results: Array<Note>;
}
/**
 *
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2008
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2008
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2008
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Description>}
     * @memberof InlineResponse2008
     */
    results: Array<Description>;
}
/**
 *
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2009
     */
    count: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2009
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2009
     */
    previous?: string | null;
    /**
     *
     * @type {Array<Dictionary>}
     * @memberof InlineResponse2009
     */
    results: Array<Dictionary>;
}
/**
 *
 * @export
 * @interface Institution
 */
export interface Institution {
    /**
     *
     * @type {number}
     * @memberof Institution
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof Institution
     */
    modifiedBy?: number;
    /**
     *
     * @type {number}
     * @memberof Institution
     */
    createdBy?: number;
    /**
     *
     * @type {string}
     * @memberof Institution
     */
    modifiedOn?: string;
    /**
     *
     * @type {string}
     * @memberof Institution
     */
    createdOn?: string;
    /**
     * Name of institution
     * @type {string}
     * @memberof Institution
     */
    name: string;
    /**
     *
     * @type {ExternalIdentifierNested}
     * @memberof Institution
     */
    externalIdentifier: ExternalIdentifierNested;
    /**
     *
     * @type {string}
     * @memberof Institution
     */
    administrativeUnit: string;
    /**
     *
     * @type {AddressDataNested}
     * @memberof Institution
     */
    address: AddressDataNested;
}
/**
 *
 * @export
 * @interface Letter
 */
export interface Letter {
    /**
     *
     * @type {number}
     * @memberof Letter
     */
    id?: number;
    /**
     * Description of the letter.
     * @type {string}
     * @memberof Letter
     */
    name: string;
    /**
     * Direction for letter.
     * @type {string}
     * @memberof Letter
     */
    direction?: LetterDirectionEnum;
    /**
     *
     * @type {number}
     * @memberof Letter
     */
    channel?: number;
    /**
     * Indicates whether the document has final content or is, for example, a draft
     * @type {boolean}
     * @memberof Letter
     */
    _final?: boolean;
    /**
     * Date of sending or receiving.
     * @type {string}
     * @memberof Letter
     */
    date?: string;
    /**
     * Identifier of letter.
     * @type {string}
     * @memberof Letter
     */
    identifier?: string;
    /**
     *
     * @type {number}
     * @memberof Letter
     */
    institution?: number;
    /**
     *
     * @type {number}
     * @memberof Letter
     */
    _case?: number;
    /**
     *
     * @type {Array<any>}
     * @memberof Letter
     */
    attachment?: Array<any>;
    /**
     * Order of letter.
     * @type {number}
     * @memberof Letter
     */
    ordering?: number;
    /**
     * Comment for letter.
     * @type {string}
     * @memberof Letter
     */
    comment?: string;
    /**
     * Excerpt of letter.
     * @type {string}
     * @memberof Letter
     */
    excerpt?: string;
    /**
     *
     * @type {number}
     * @memberof Letter
     */
    description?: number;
    /**
     *
     * @type {string}
     * @memberof Letter
     */
    createdOn?: string;
    /**
     *
     * @type {number}
     * @memberof Letter
     */
    createdBy?: number;
    /**
     *
     * @type {string}
     * @memberof Letter
     */
    modifiedOn?: string;
    /**
     *
     * @type {number}
     * @memberof Letter
     */
    modifiedBy?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum LetterDirectionEnum {
    IN = "IN",
    OUT = "OUT"
}
/**
 *
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     *
     * @type {number}
     * @memberof ModelFile
     */
    id?: number;
    /**
     * Path to file.
     * @type {string}
     * @memberof ModelFile
     */
    path: string;
    /**
     *
     * @type {string}
     * @memberof ModelFile
     */
    downloadUrl?: string;
    /**
     * Name of file.
     * @type {string}
     * @memberof ModelFile
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof ModelFile
     */
    letter?: number;
}
/**
 *
 * @export
 * @interface NestedFeature
 */
export interface NestedFeature {
    /**
     *
     * @type {number}
     * @memberof NestedFeature
     */
    id?: number;
    /**
     * Name of feature.
     * @type {string}
     * @memberof NestedFeature
     */
    name: string;
}
/**
 *
 * @export
 * @interface Note
 */
export interface Note {
    /**
     * Related case.
     * @type {number}
     * @memberof Note
     */
    _case: number;
    /**
     *
     * @type {string}
     * @memberof Note
     */
    comment: string;
}
/**
 *
 * @export
 * @interface SignRequest
 */
export interface SignRequest {
    /**
     *
     * @type {string}
     * @memberof SignRequest
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof SignRequest
     */
    method?: string;
    /**
     *
     * @type {string}
     * @memberof SignRequest
     */
    url?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof SignRequest
     */
    formData?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof SignRequest
     */
    path?: string;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    name: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     *
     * @type {number}
     * @memberof User
     */
    id?: number;
}
/**
 * CasesApi - axios parameter creator
 * @export
 */
export declare const CasesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesCreate: (data: CaseCount, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesNotifiedUserList: (casePk: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesNotifiedUserRead: (casePk: string, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPartialUpdate: (id: number, data: CaseCount, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesResponsibleUserList: (casePk: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesResponsibleUserRead: (casePk: string, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesUpdate: (id: number, data: CaseCount, options?: any) => Promise<RequestArgs>;
};
/**
 * CasesApi - functional programming interface
 * @export
 */
export declare const CasesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesCreate(data: CaseCount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseCount>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesNotifiedUserList(casePk: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesNotifiedUserRead(casePk: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPartialUpdate(id: number, data: CaseCount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseCount>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseCount>>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesResponsibleUserList(casePk: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesResponsibleUserRead(casePk: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesUpdate(id: number, data: CaseCount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseCount>>;
};
/**
 * CasesApi - factory interface
 * @export
 */
export declare const CasesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesCreate(data: CaseCount, options?: any): AxiosPromise<CaseCount>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse200>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesNotifiedUserList(casePk: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesNotifiedUserRead(casePk: string, id: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPartialUpdate(id: number, data: CaseCount, options?: any): AxiosPromise<CaseCount>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesRead(id: number, options?: any): AxiosPromise<CaseCount>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesResponsibleUserList(casePk: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesResponsibleUserRead(casePk: string, id: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesUpdate(id: number, data: CaseCount, options?: any): AxiosPromise<CaseCount>;
};
/**
 * CasesApi - object-oriented interface
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
export declare class CasesApi extends BaseAPI {
    /**
     *
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesCreate(data: CaseCount, options?: any): Promise<import("axios").AxiosResponse<CaseCount>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse200>>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesNotifiedUserList(casePk: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2001>>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesNotifiedUserRead(casePk: string, id: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesPartialUpdate(id: number, data: CaseCount, options?: any): Promise<import("axios").AxiosResponse<CaseCount>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesRead(id: number, options?: any): Promise<import("axios").AxiosResponse<CaseCount>>;
    /**
     *
     * @param {string} casePk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesResponsibleUserList(casePk: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2001>>;
    /**
     *
     * @param {string} casePk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesResponsibleUserRead(casePk: string, id: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @param {number} id A unique integer value identifying this case.
     * @param {CaseCount} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    casesUpdate(id: number, data: CaseCount, options?: any): Promise<import("axios").AxiosResponse<CaseCount>>;
}
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export declare const ChannelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsCreate: (data: Channel, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPartialUpdate: (id: number, data: Channel, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsUpdate: (id: number, data: Channel, options?: any) => Promise<RequestArgs>;
};
/**
 * ChannelsApi - functional programming interface
 * @export
 */
export declare const ChannelsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsCreate(data: Channel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPartialUpdate(id: number, data: Channel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsUpdate(id: number, data: Channel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
};
/**
 * ChannelsApi - factory interface
 * @export
 */
export declare const ChannelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsCreate(data: Channel, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPartialUpdate(id: number, data: Channel, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsRead(id: number, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsUpdate(id: number, data: Channel, options?: any): AxiosPromise<Channel>;
};
/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export declare class ChannelsApi extends BaseAPI {
    /**
     *
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    channelsCreate(data: Channel, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    channelsDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    channelsList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    channelsPartialUpdate(id: number, data: Channel, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    channelsRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
    /**
     *
     * @param {number} id A unique integer value identifying this channel.
     * @param {Channel} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    channelsUpdate(id: number, data: Channel, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
}
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export declare const CollectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesEventsList: (casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesEventsRead: (casePk: string, collectionPk: string, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesLettersList: (casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesLettersRead: (casePk: string, collectionPk: string, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesList: (collectionPk: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesNotesList: (casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesNotesRead: (casePk: string, collectionPk: string, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesRead: (collectionPk: string, id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCreate: (data: Collection, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsPartialUpdate: (id: number, data: Collection, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} collectionPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsTokensCreate: (collectionPk: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsUpdate: (id: number, data: Collection, options?: any) => Promise<RequestArgs>;
};
/**
 * CollectionsApi - functional programming interface
 * @export
 */
export declare const CollectionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesEventsList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesEventsRead(casePk: string, collectionPk: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesLettersList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesLettersRead(casePk: string, collectionPk: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Letter>>;
    /**
     *
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesList(collectionPk: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesNotesList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesNotesRead(casePk: string, collectionPk: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Note>>;
    /**
     *
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesRead(collectionPk: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>>;
    /**
     *
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCreate(data: Collection, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsPartialUpdate(id: number, data: Collection, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>>;
    /**
     *
     * @param {string} collectionPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsTokensCreate(collectionPk: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsUpdate(id: number, data: Collection, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>>;
};
/**
 * CollectionsApi - factory interface
 * @export
 */
export declare const CollectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesEventsList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2005>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesEventsRead(casePk: string, collectionPk: string, id: string, options?: any): AxiosPromise<Event>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesLettersList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesLettersRead(casePk: string, collectionPk: string, id: string, options?: any): AxiosPromise<Letter>;
    /**
     *
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesList(collectionPk: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2004>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesNotesList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesNotesRead(casePk: string, collectionPk: string, id: string, options?: any): AxiosPromise<Note>;
    /**
     *
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCasesRead(collectionPk: string, id: string, options?: any): AxiosPromise<Case>;
    /**
     *
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsCreate(data: Collection, options?: any): AxiosPromise<Collection>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsPartialUpdate(id: number, data: Collection, options?: any): AxiosPromise<Collection>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsRead(id: number, options?: any): AxiosPromise<Collection>;
    /**
     *
     * @param {string} collectionPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsTokensCreate(collectionPk: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsUpdate(id: number, data: Collection, options?: any): AxiosPromise<Collection>;
};
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export declare class CollectionsApi extends BaseAPI {
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesEventsList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2005>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesEventsRead(casePk: string, collectionPk: string, id: string, options?: any): Promise<import("axios").AxiosResponse<Event>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesLettersList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2006>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesLettersRead(casePk: string, collectionPk: string, id: string, options?: any): Promise<import("axios").AxiosResponse<Letter>>;
    /**
     *
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesList(collectionPk: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2004>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesNotesList(casePk: string, collectionPk: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2007>>;
    /**
     *
     * @param {string} casePk
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesNotesRead(casePk: string, collectionPk: string, id: string, options?: any): Promise<import("axios").AxiosResponse<Note>>;
    /**
     *
     * @param {string} collectionPk
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCasesRead(collectionPk: string, id: string, options?: any): Promise<import("axios").AxiosResponse<Case>>;
    /**
     *
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsCreate(data: Collection, options?: any): Promise<import("axios").AxiosResponse<Collection>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2003>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsPartialUpdate(id: number, data: Collection, options?: any): Promise<import("axios").AxiosResponse<Collection>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Collection>>;
    /**
     *
     * @param {string} collectionPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsTokensCreate(collectionPk: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} id A unique integer value identifying this collection.
     * @param {Collection} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    collectionsUpdate(id: number, data: Collection, options?: any): Promise<import("axios").AxiosResponse<Collection>>;
}
/**
 * DescriptionsApi - axios parameter creator
 * @export
 */
export declare const DescriptionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsCreate: (data: Description, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsPartialUpdate: (id: number, data: Description, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsUpdate: (id: number, data: Description, options?: any) => Promise<RequestArgs>;
};
/**
 * DescriptionsApi - functional programming interface
 * @export
 */
export declare const DescriptionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsCreate(data: Description, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Description>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsPartialUpdate(id: number, data: Description, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Description>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Description>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsUpdate(id: number, data: Description, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Description>>;
};
/**
 * DescriptionsApi - factory interface
 * @export
 */
export declare const DescriptionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsCreate(data: Description, options?: any): AxiosPromise<Description>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsPartialUpdate(id: number, data: Description, options?: any): AxiosPromise<Description>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsRead(id: number, options?: any): AxiosPromise<Description>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptionsUpdate(id: number, data: Description, options?: any): AxiosPromise<Description>;
};
/**
 * DescriptionsApi - object-oriented interface
 * @export
 * @class DescriptionsApi
 * @extends {BaseAPI}
 */
export declare class DescriptionsApi extends BaseAPI {
    /**
     *
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionsApi
     */
    descriptionsCreate(data: Description, options?: any): Promise<import("axios").AxiosResponse<Description>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionsApi
     */
    descriptionsDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionsApi
     */
    descriptionsList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2008>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionsApi
     */
    descriptionsPartialUpdate(id: number, data: Description, options?: any): Promise<import("axios").AxiosResponse<Description>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionsApi
     */
    descriptionsRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Description>>;
    /**
     *
     * @param {number} id A unique integer value identifying this description.
     * @param {Description} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionsApi
     */
    descriptionsUpdate(id: number, data: Description, options?: any): Promise<import("axios").AxiosResponse<Description>>;
}
/**
 * DictionariesApi - axios parameter creator
 * @export
 */
export declare const DictionariesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesCreate: (data: Dictionary, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesPartialUpdate: (id: number, data: Dictionary, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesUpdate: (id: number, data: Dictionary, options?: any) => Promise<RequestArgs>;
};
/**
 * DictionariesApi - functional programming interface
 * @export
 */
export declare const DictionariesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesCreate(data: Dictionary, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dictionary>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesPartialUpdate(id: number, data: Dictionary, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dictionary>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dictionary>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesUpdate(id: number, data: Dictionary, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dictionary>>;
};
/**
 * DictionariesApi - factory interface
 * @export
 */
export declare const DictionariesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesCreate(data: Dictionary, options?: any): AxiosPromise<Dictionary>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesPartialUpdate(id: number, data: Dictionary, options?: any): AxiosPromise<Dictionary>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesRead(id: number, options?: any): AxiosPromise<Dictionary>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictionariesUpdate(id: number, data: Dictionary, options?: any): AxiosPromise<Dictionary>;
};
/**
 * DictionariesApi - object-oriented interface
 * @export
 * @class DictionariesApi
 * @extends {BaseAPI}
 */
export declare class DictionariesApi extends BaseAPI {
    /**
     *
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    dictionariesCreate(data: Dictionary, options?: any): Promise<import("axios").AxiosResponse<Dictionary>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    dictionariesDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    dictionariesList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2009>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    dictionariesPartialUpdate(id: number, data: Dictionary, options?: any): Promise<import("axios").AxiosResponse<Dictionary>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    dictionariesRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Dictionary>>;
    /**
     *
     * @param {number} id A unique integer value identifying this dictionary.
     * @param {Dictionary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionariesApi
     */
    dictionariesUpdate(id: number, data: Dictionary, options?: any): Promise<import("axios").AxiosResponse<Dictionary>>;
}
/**
 * EventsApi - axios parameter creator
 * @export
 */
export declare const EventsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsCreate: (data: Event, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsPartialUpdate: (id: number, data: Event, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsUpdate: (id: number, data: Event, options?: any) => Promise<RequestArgs>;
};
/**
 * EventsApi - functional programming interface
 * @export
 */
export declare const EventsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsCreate(data: Event, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsPartialUpdate(id: number, data: Event, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsUpdate(id: number, data: Event, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>>;
};
/**
 * EventsApi - factory interface
 * @export
 */
export declare const EventsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsCreate(data: Event, options?: any): AxiosPromise<Event>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2005>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsPartialUpdate(id: number, data: Event, options?: any): AxiosPromise<Event>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsRead(id: number, options?: any): AxiosPromise<Event>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsUpdate(id: number, data: Event, options?: any): AxiosPromise<Event>;
};
/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export declare class EventsApi extends BaseAPI {
    /**
     *
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsCreate(data: Event, options?: any): Promise<import("axios").AxiosResponse<Event>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2005>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsPartialUpdate(id: number, data: Event, options?: any): Promise<import("axios").AxiosResponse<Event>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Event>>;
    /**
     *
     * @param {number} id A unique integer value identifying this event.
     * @param {Event} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsUpdate(id: number, data: Event, options?: any): Promise<import("axios").AxiosResponse<Event>>;
}
/**
 * InstitutionsApi - axios parameter creator
 * @export
 */
export declare const InstitutionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsCreate: (data: Institution, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsPartialUpdate: (id: number, data: Institution, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsUpdate: (id: number, data: Institution, options?: any) => Promise<RequestArgs>;
};
/**
 * InstitutionsApi - functional programming interface
 * @export
 */
export declare const InstitutionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsCreate(data: Institution, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsPartialUpdate(id: number, data: Institution, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsUpdate(id: number, data: Institution, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>>;
};
/**
 * InstitutionsApi - factory interface
 * @export
 */
export declare const InstitutionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsCreate(data: Institution, options?: any): AxiosPromise<Institution>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20010>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsPartialUpdate(id: number, data: Institution, options?: any): AxiosPromise<Institution>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsRead(id: number, options?: any): AxiosPromise<Institution>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    institutionsUpdate(id: number, data: Institution, options?: any): AxiosPromise<Institution>;
};
/**
 * InstitutionsApi - object-oriented interface
 * @export
 * @class InstitutionsApi
 * @extends {BaseAPI}
 */
export declare class InstitutionsApi extends BaseAPI {
    /**
     *
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApi
     */
    institutionsCreate(data: Institution, options?: any): Promise<import("axios").AxiosResponse<Institution>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApi
     */
    institutionsDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApi
     */
    institutionsList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse20010>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApi
     */
    institutionsPartialUpdate(id: number, data: Institution, options?: any): Promise<import("axios").AxiosResponse<Institution>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApi
     */
    institutionsRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Institution>>;
    /**
     *
     * @param {number} id A unique integer value identifying this institution.
     * @param {Institution} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApi
     */
    institutionsUpdate(id: number, data: Institution, options?: any): Promise<import("axios").AxiosResponse<Institution>>;
}
/**
 * LettersApi - axios parameter creator
 * @export
 */
export declare const LettersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersCreate: (data: Letter, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     * Generates pre-signed form data for uploading files to object storage.
     * @param {SignRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFileSignCreate: (data: SignRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesCreate: (letterPk: string, data: ModelFile, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesDelete: (id: string, letterPk: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} letterPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesList: (letterPk: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesPartialUpdate: (id: string, letterPk: string, data: ModelFile, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesRead: (id: string, letterPk: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesUpdate: (id: string, letterPk: string, data: ModelFile, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersPartialUpdate: (id: number, data: Letter, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersUpdate: (id: number, data: Letter, options?: any) => Promise<RequestArgs>;
};
/**
 * LettersApi - functional programming interface
 * @export
 */
export declare const LettersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersCreate(data: Letter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Letter>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Generates pre-signed form data for uploading files to object storage.
     * @param {SignRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFileSignCreate(data: SignRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignRequest>>;
    /**
     *
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesCreate(letterPk: string, data: ModelFile, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesDelete(id: string, letterPk: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} letterPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesList(letterPk: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesPartialUpdate(id: string, letterPk: string, data: ModelFile, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesRead(id: string, letterPk: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesUpdate(id: string, letterPk: string, data: ModelFile, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersPartialUpdate(id: number, data: Letter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Letter>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Letter>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersUpdate(id: number, data: Letter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Letter>>;
};
/**
 * LettersApi - factory interface
 * @export
 */
export declare const LettersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersCreate(data: Letter, options?: any): AxiosPromise<Letter>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     * Generates pre-signed form data for uploading files to object storage.
     * @param {SignRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFileSignCreate(data: SignRequest, options?: any): AxiosPromise<SignRequest>;
    /**
     *
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesCreate(letterPk: string, data: ModelFile, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesDelete(id: string, letterPk: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} letterPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesList(letterPk: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesPartialUpdate(id: string, letterPk: string, data: ModelFile, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesRead(id: string, letterPk: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersFilesUpdate(id: string, letterPk: string, data: ModelFile, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersPartialUpdate(id: number, data: Letter, options?: any): AxiosPromise<Letter>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersRead(id: number, options?: any): AxiosPromise<Letter>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lettersUpdate(id: number, data: Letter, options?: any): AxiosPromise<Letter>;
};
/**
 * LettersApi - object-oriented interface
 * @export
 * @class LettersApi
 * @extends {BaseAPI}
 */
export declare class LettersApi extends BaseAPI {
    /**
     *
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersCreate(data: Letter, options?: any): Promise<import("axios").AxiosResponse<Letter>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Generates pre-signed form data for uploading files to object storage.
     * @param {SignRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersFileSignCreate(data: SignRequest, options?: any): Promise<import("axios").AxiosResponse<SignRequest>>;
    /**
     *
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersFilesCreate(letterPk: string, data: ModelFile, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersFilesDelete(id: string, letterPk: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} letterPk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersFilesList(letterPk: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse20011>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersFilesPartialUpdate(id: string, letterPk: string, data: ModelFile, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersFilesRead(id: string, letterPk: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @param {string} id
     * @param {string} letterPk
     * @param {ModelFile} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersFilesUpdate(id: string, letterPk: string, data: ModelFile, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2006>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersPartialUpdate(id: number, data: Letter, options?: any): Promise<import("axios").AxiosResponse<Letter>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Letter>>;
    /**
     *
     * @param {number} id A unique integer value identifying this letter.
     * @param {Letter} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LettersApi
     */
    lettersUpdate(id: number, data: Letter, options?: any): Promise<import("axios").AxiosResponse<Letter>>;
}
/**
 * NotesApi - axios parameter creator
 * @export
 */
export declare const NotesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesCreate: (data: Note, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesPartialUpdate: (id: number, data: Note, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesUpdate: (id: number, data: Note, options?: any) => Promise<RequestArgs>;
};
/**
 * NotesApi - functional programming interface
 * @export
 */
export declare const NotesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesCreate(data: Note, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Note>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesPartialUpdate(id: number, data: Note, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Note>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Note>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesUpdate(id: number, data: Note, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Note>>;
};
/**
 * NotesApi - factory interface
 * @export
 */
export declare const NotesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesCreate(data: Note, options?: any): AxiosPromise<Note>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesPartialUpdate(id: number, data: Note, options?: any): AxiosPromise<Note>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesRead(id: number, options?: any): AxiosPromise<Note>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesUpdate(id: number, data: Note, options?: any): AxiosPromise<Note>;
};
/**
 * NotesApi - object-oriented interface
 * @export
 * @class NotesApi
 * @extends {BaseAPI}
 */
export declare class NotesApi extends BaseAPI {
    /**
     *
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesCreate(data: Note, options?: any): Promise<import("axios").AxiosResponse<Note>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2007>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesPartialUpdate(id: number, data: Note, options?: any): Promise<import("axios").AxiosResponse<Note>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Note>>;
    /**
     *
     * @param {number} id A unique integer value identifying this note.
     * @param {Note} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesUpdate(id: number, data: Note, options?: any): Promise<import("axios").AxiosResponse<Note>>;
}
/**
 * TagsApi - axios parameter creator
 * @export
 */
export declare const TagsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsCreate: (data: Tag, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsPartialUpdate: (id: number, data: Tag, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsUpdate: (id: number, data: Tag, options?: any) => Promise<RequestArgs>;
};
/**
 * TagsApi - functional programming interface
 * @export
 */
export declare const TagsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsCreate(data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsPartialUpdate(id: number, data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsUpdate(id: number, data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>>;
};
/**
 * TagsApi - factory interface
 * @export
 */
export declare const TagsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsCreate(data: Tag, options?: any): AxiosPromise<Tag>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20012>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsPartialUpdate(id: number, data: Tag, options?: any): AxiosPromise<Tag>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsRead(id: number, options?: any): AxiosPromise<Tag>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsUpdate(id: number, data: Tag, options?: any): AxiosPromise<Tag>;
};
/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export declare class TagsApi extends BaseAPI {
    /**
     *
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    tagsCreate(data: Tag, options?: any): Promise<import("axios").AxiosResponse<Tag>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    tagsDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    tagsList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse20012>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    tagsPartialUpdate(id: number, data: Tag, options?: any): Promise<import("axios").AxiosResponse<Tag>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    tagsRead(id: number, options?: any): Promise<import("axios").AxiosResponse<Tag>>;
    /**
     *
     * @param {number} id A unique integer value identifying this tag.
     * @param {Tag} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    tagsUpdate(id: number, data: Tag, options?: any): Promise<import("axios").AxiosResponse<Tag>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: (data: User, options?: any) => Promise<RequestArgs>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDelete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersList: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPartialUpdate: (id: number, data: User, options?: any) => Promise<RequestArgs>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRead: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate: (id: number, data: User, options?: any) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(data: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersList(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPartialUpdate(id: number, data: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate(id: number, data: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(data: User, options?: any): AxiosPromise<User>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersList(limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2001>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPartialUpdate(id: number, data: User, options?: any): AxiosPromise<User>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRead(id: number, options?: any): AxiosPromise<User>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate(id: number, data: User, options?: any): AxiosPromise<User>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersCreate(data: User, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersDelete(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersList(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2001>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersPartialUpdate(id: number, data: User, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersRead(id: number, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} id A unique integer value identifying this user.
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUpdate(id: number, data: User, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
